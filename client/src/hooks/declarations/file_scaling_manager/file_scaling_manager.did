type definite_canister_settings = 
 record {
   compute_allocation: nat;
   controllers: vec principal;
   freezing_threshold: nat;
   memory_allocation: nat;
 };
type Status = 
 record {
   cycles: nat;
   memory_size: nat;
   module_hash: opt vec nat8;
   settings: definite_canister_settings;
   status: variant {
             running;
             stopped;
             stopping;
           };
 };
type Result_1 = 
 variant {
   err: text;
   ok: Status;
 };
type Result = 
 variant {
   err;
   ok: Status;
 };
type Health = 
 record {
   assets_size: int;
   cycles: int;
   heap_mb: int;
   memory_mb: int;
 };
type FileScalingManager = 
 service {
   add_controller: (principal) -> ();
   cycleBalance: () -> (nat) query;
   getSelfStatus: () -> (Result_1);
   getStorageCanisterStatus: (principal) -> (Result);
   get_canister_records: () -> (vec CanisterInfo) query;
   get_current_canister: () -> (opt CanisterInfo) query;
   get_file_storage_canister_id: () -> (text) query;
   init: () -> (text);
   remove_controller: (principal) -> ();
   version: () -> (nat) query;
 };
type CanisterInfo = 
 record {
   created: int;
   health: opt Health;
   id: text;
   name: text;
   parent_name: text;
 };
service : (bool) -> FileScalingManager
